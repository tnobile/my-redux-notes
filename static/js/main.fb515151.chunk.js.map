{"version":3,"sources":["redux/features/notes/notesSlice.js","components/Note.js","components/NoteCounter.js","components/EditNote.js","components/NoteList.js","components/AddNote.js","components/NotesApp.js","redux/features/todos/todosSlice.js","components/Todos/TodoList.js","components/Todos/Header.js","components/Todos/NewItem.js","components/Todos/TodoApp.js","HowTo.mdx","App.js","reportWebVitals.js","redux/store/index.js","index.js"],"names":["uuidv4","require","notesSlice","createSlice","name","initialState","notes","reducers","addNote","state","action","payload","loadNotes","map","p","id","title","content","body","editong","deleteNote","filter","editNote","note","editing","updateNote","actions","connect","dispatch","className","onClick","NoteCounter","useSelector","store","shallowEqual","console","log","length","EditNote","useState","setTitle","setContent","useDispatch","onSubmit","e","preventDefault","data","required","type","value","onChange","target","rows","NoteList","notesItems","AddNote","setValue","nanoid","placeholder","NotesApp","useEffect","fetch","then","response","json","slice","list","itemId","task","completed","deleted","addItem","newItem","todoItem","push","deleteDone","item","updateList","itemIndex","updatedList","removeItem","reducer","useStyles","makeStyles","theme","root","maxWidth","backgroundColor","palette","background","paper","margin","strike","textDecoration","classes","todos","listItems","labelId","listItemText","ListItemText","primary","ListItem","button","ListItemSecondaryAction","Checkbox","edge","checked","inputProps","List","dense","TabPanel","props","children","index","other","role","hidden","aria-labelledby","Typography","Header","Tabs","evt","newValue","style","indicatorColor","textColor","centered","Tab","label","grid","alignItems","boxSizing","padding","input","width","mapDispatchToProps","React","entry","updateEntry","Grid","container","spacing","xs","TextField","Button","variant","color","height","TodoApp","Paper","TodoList","Box","msg","display","textAlign","fontSize","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent","NavBar","to","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","todosSlice","configureStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb515151.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst uuidv4 = require(\"uuid/v4\")\nconst notesSlice = createSlice({\n    // A name, used in action types\n    name: \"notes\",\n    // better with initialState: []\n    initialState: {\n        notes: []\n    },\n    reducers: {\n        // Redux toolkit uses Immer, you do not have to worry about mutating the state, but... just keep the logic\n        //\n        // Error: An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft\n        // The issue is the use of an arrow function with no curly braces as the reducer, because that acts as an implicit return statement. \n        //So, you're both mutating state.token, and returning the result of the assignment.\n        addNote: (state, action) => { state.notes = [action.payload, ...state.notes] },\n        loadNotes: (state, action) => { state.notes = [...state.notes, ...action.payload.map(p => ({ id: uuidv4(), title: p.title, content: p.body, editong: false }))] },\n        deleteNote: (state, action) => { state.notes = [...state.notes.filter(p => p.id !== action.payload)] },\n        editNote: (state, action) => { state.notes = state.notes.map(note => note.id === action.payload ? { ...note, editing: true } : note) },\n        updateNote: (state, action) => { state.notes = [{ ...action.payload, editing: false }, ...state.notes.filter(note => note.id !== action.payload.id),] },\n    }\n});\n\n// Will handle the action type `'notes/add'`, etc.\nexport const { addNote, loadNotes, deleteNote, editNote, updateNote } = notesSlice.actions;\n\nexport default notesSlice.reducer;","import React from 'react';\nimport { connect } from 'react-redux'\n//import { editNote, deleteNote } from '../redux/actions/actions'\nimport { editNote, deleteNote } from '../redux/features/notes/notesSlice';\n\nconst Note = ({ note, dispatch }) => {\n    return (\n        <div className=\"note\">\n            <h2 className=\"note_title\">{note.title}</h2>\n            <p className=\"note_message\">{note.content}</p>\n            <h2 className=\"note_message\">{note.id}</h2>\n            <div className=\"control-buttons\">\n                <button className=\"btn btn-primary px-4 m-1\"\n                    onClick={() => dispatch(editNote(note.id))}>\n                    Edit</button>\n                <button className=\"btn btn-danger m-1\"\n                    onClick={() => dispatch(deleteNote(note.id))}>\n                    Delete</button>\n            </div>\n        </div>\n    )\n}\n// useDispatch hook will be simpler than Higher Order Component\nexport default connect()(Note);","import { useSelector, shallowEqual } from \"react-redux\";\n\nconst NoteCounter = () => {\n    const { notes } = useSelector(store => store.notes, shallowEqual);\n    return (\n        <div>{console.log('notes', notes)}\n            <p className=\"text-center\">Number of Notes: {notes.length}</p>\n        </div>\n    );\n}\n// const mapStateToProps = (state) => {\n//     return { state }\n// };\n\n// export default connect(mapStateToProps)(NoteCounter);\nexport default NoteCounter;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n//import { updateNote } from '../redux/actions/actions';\nimport { updateNote } from '../redux/features/notes/notesSlice';\n\nconst EditNote = ({ note }) => {\n    const [title, setTitle] = useState(note.title);\n    const [content, setContent] = useState(note.content);\n\n    const dispatch = useDispatch();\n    function handleUpdate(e) {\n        e.preventDefault();\n        const data = {\n            title,\n            content\n        };\n        console.log(`dispatch update with ${note.id}`, data);\n        //dispatch(updateNote(note.id, data));\n        dispatch(updateNote({ ...data, id: note.id }));\n    };\n\n    return (\n        <div className=\"note\">\n            <form className=\"form-group\" onSubmit={handleUpdate}>\n                <input className='form-control p-2 mb-2'\n                    required type=\"text\" value={title} onChange={e => setTitle(e.target.value)}\n                />\n                <textarea className='form-control p-2 mb-2'\n                    required rows=\"5\" value={content} onChange={e => setContent(e.target.value)} />\n                <button type=\"submit\" className='btn btn-primary'>Update</button>\n            </form>\n        </div>\n    );\n}\n\nexport default EditNote;","import React from \"react\"\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport Note from \"./Note\";\nimport NoteCounter from './NoteCounter'\nimport EditNote from './EditNote'\n\n/**\n * The useSelector hook uses === (a.k.a. strict reference equality check) to check whether the previously fetched value from the store \n * is the same that we are currently getting. If that’s not the case, the component re-renders.\n * For simple selectors that only return a portion of the Redux store and nothing more, you can omit the second parameter in this hook. \n * However, when a new object is returned each time the hook runs (e.g., you are making some calculations in the selector function or are \n * building a new object from multiple values of the store), then you should make use of the Redux’s shallowEqual function. If that’s not sufficient, \n * give Reselect a try or try wrapping your component in useMemo instead.\n */\nconst NoteList = () => {\n    const { notes } = useSelector(store => store.notes, shallowEqual);\n    const notesItems = notes.map((note) => (\n        <div key={note.id}>\n            {note.editing ?\n                <EditNote note={note} /> : <Note note={note} />}\n        </div>\n    ));\n\n    return (\n        <div className=\"note-container\">\n            <h3 className=\"text-center\">All Notes</h3>\n            { notes && notes.length > 0 && <NoteCounter />}\n            <div className=\"note-container\">\n                {notes && notesItems}\n            </div>\n        </div>)\n}\n\nexport default NoteList","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n//import { addNote } from '../redux/actions/actions'\nimport { addNote } from '../redux/features/notes/notesSlice'\nimport { nanoid } from 'nanoid'\n\nconst AddNote = () => {\n    const [value, setValue] = useState('');\n    const [content, setContent] = useState('');\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //dispatch(addNote(value, content));\n        dispatch(addNote({ title: value, content: content, id: nanoid(), editing: false }));\n\n        setContent('');\n        setValue('');\n    }\n\n    return (\n        <div className=\"note-container\" >\n            <h2 className=\"text-center\">Write a new note</h2>\n\n            <form className=\"form-group\" onSubmit={handleSubmit}>\n                <input className=\"form-control\" required\n                    type=\"text\" name='title'\n                    placeholder=\"enter title\"\n                    value={value} onChange={e => setValue(e.target.value)} />\n                <textarea className=\"form-control\"\n                    name='content' required rows={5}\n                    placeholder=\"enter content\"\n                    value={content} onChange={e => setContent(e.target.value)} />\n                <button className=\"btn btn-primary btn-lg\" type=\"submit\">Submit</button>\n            </form>\n        </div >\n    );\n}\n\nexport default AddNote;","import React, { useEffect } from 'react'\nimport NoteList from './NoteList';\nimport NewNote from './AddNote';\nimport { useDispatch } from 'react-redux'\n//import { LOAD_NOTES } from '../redux/actions/actions'\nimport { loadNotes } from '../redux/features/notes/notesSlice'\n\nconst NotesApp = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(response => response.json())\n            .then(json => {\n                console.log(\"p\", json)\n                // dispatch({\n                //     type: LOAD_NOTES,\n                //     payload: json.slice(0, 5)\n                // })\n                dispatch(loadNotes(json.slice(0, 5)));\n            })\n    }, [dispatch])\n\n    return (\n        <div className=\"container fluid \" >\n            <div className=\"row\">\n                <div className=\"col\">\n                    <NewNote dispatch={dispatch} />\n                </div>\n                <div className=\"col\">\n                    <NoteList />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NotesApp;","import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from 'nanoid'\n\nconst { actions, reducer } = createSlice({\n  name: \"todos\",\n  initialState: {\n    list: [\n      {\n        itemId: nanoid(),\n        task: \"align buttons\",\n        completed: false\n      },\n      {\n        itemId: nanoid(),\n        task: \"done tab\",\n        completed: false\n      },\n      {\n        itemId: nanoid(),\n        task: \"async fetch thunk\",\n        completed: false\n      }\n    ],\n    deleted: []\n  },\n  reducers: {\n    addItem: (state, action) => {\n      const newItem = {\n        itemId: nanoid(),\n        task: action.payload.todoItem,\n        completed: false\n      };\n      state.list.push(newItem);\n    },\n    deleteDone: (state, action) => {\n      state.deleted = [...state.deleted,...state.list.filter(item => item.completed)]\n      const updateList = state.list.filter(item => !item.completed);\n      state.list = updateList;\n    },\n    updateList: (state, action) => {\n      const { itemIndex } = action.payload;\n      const updatedList = state.list.map(item => {\n        if (item.itemId === itemIndex) {\n          item.completed = !item.completed;\n        }\n        return item;\n      });\n      state.list = updatedList;\n    },\n    removeItem: state => state\n  }\n});\n\nexport const { addItem, deleteDone, updateList } = actions;\n\nexport default reducer;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateList} from \"../../redux/features/todos/todosSlice\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: \"400px\",\n    backgroundColor: theme.palette.background.paper,\n    margin: \"auto\"\n  },\n  strike: {\n    textDecoration: \"line-through;\"\n  }\n}));\n\nconst ToDoList = ({ dispatch }) => {\n  const classes = useStyles();\n\n  const { todos } = useSelector(store => store, shallowEqual);\n\n  const handleToggle = value => () => {\n    dispatch(updateList({ itemIndex: value }));\n  };\n\n  console.log('todos', todos);\n\n  const listItems = todos.list.map(item => {\n    const labelId = `checkbox-list-secondary-label-${item.itemId}`;\n    const listItemText = item.completed ? (\n      <ListItemText\n        id={labelId}\n        primary={item.task}\n        className={classes.strike}\n      />\n    ) : (\n      <ListItemText id={labelId} primary={item.task} />\n    );\n    return (\n      <ListItem key={item.itemId} button>\n        {listItemText}\n        <ListItemSecondaryAction>\n          <Checkbox\n            edge=\"end\"\n            onChange={handleToggle(item.itemId)}\n            checked={item.completed}\n            inputProps={{ \"aria-labelledby\": labelId }}\n          />\n        </ListItemSecondaryAction>\n      </ListItem>\n    );\n  });\n\n  return (\n    <List dense className={classes.root}>\n      {listItems}\n    </List>\n  );\n};\n\n// const mapStateToProps = state => ({\n//   todo: state\n// });\n// const mapDispatchToProps = { updateList };\n//export default connect(mapStateToProps, mapDispatchToProps)(ToDoList);\n\n//The connect() function connects a React component to a Redux store.\nexport default connect()(ToDoList);","import React, { useState } from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from '@material-ui/core/Typography';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`a11y-tabpanel-${index}`}\n            aria-labelledby={`a11y-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Typography>{children}</Typography>\n            )}\n        </div>\n    );\n}\n\nconst Header = () => {\n    const [value, setValue] = useState(0);\n    return (\n        <Tabs\n            value={value}\n            onChange={(evt, newValue) => setValue(newValue)}\n            style={{ backgroundColor: \"#f5f5f5\" }}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            centered\n        >\n            <Tab label=\"TODOs\" />\n            <Tab label=\"Done\" />\n\n            <TabPanel value={value} index={2}>\n                Secrets! ! !\n            </TabPanel>\n\n        </Tabs>\n    );\n};\n\nexport default Header;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addItem, deleteDone } from \"../../redux/features/todos/todosSlice\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles(theme => ({\n  grid: {\n    alignItems: \"center\",\n    boxSizing: \"border-box\",\n    padding: \"1rem\"\n  },\n  input: {\n    width: \"100%\"\n  }\n}));\n\nconst NewItem = (props) => {\n  const [entry, updateEntry] = React.useState(\"\");\n  const classes = useStyles();\n\n  const onAdd = () => {\n    if (!entry) return;\n\n    props.addItem({\n      todoItem: entry\n    });\n    updateEntry(\"\");\n  };\n\n  const onDelete = () => {\n    props.deleteDone();\n  }\n\n  return (\n    <Grid container spacing={1} className={classes.grid}>\n      <Grid item xs={8}>\n        <TextField\n          required \n          id=\"standard-textarea\"\n          label=\"add new task\"\n          placeholder=\"add new task\"\n          value={entry}\n          onChange={e => updateEntry(e.target.value)}\n          className={classes.input}\n        />\n      </Grid>\n      <Grid item xs={2}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onAdd}>Add</Button>\n      </Grid>\n      <Grid item xs={2}>\n        <Button variant=\"contained\" color=\"secondary\" onClick={onDelete}>Delete</Button>\n      </Grid>\n    </Grid>\n  );\n};\n\n// better to use selector hook!\nconst mapStateToProps = state => ({\n  value: state.todos,\n});\n\nconst mapDispatchToProps = { addItem, deleteDone };\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);\n\n","import TodoList from './TodoList'\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Header from './Header';\nimport AddOrDeleteTodo from './NewItem';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        width: \"600px\",\n        padding: theme.spacing(3, 2),\n        height: \"600px\",\n        margin: \"3rem auto\",\n    }\n}));\n\nconst TodoApp = () => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.paper}>\n            <Header />\n            <AddOrDeleteTodo />\n            <TodoList />\n        </Paper>\n    );\n}\n\nexport default TodoApp;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const Box = ({\n  color,\n  msg\n}) => <div style={{\n  padding: 20,\n  backgroundColor: color,\n  width: \"50%\",\n  display: \"inline-block\",\n  textAlign: \"center\",\n  fontSize: \"150px\"\n}}>\n    {msg}\n  </div>;\n\nconst layoutProps = {\n  Box\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`¡Hóla, MDX!`}</h1>\n    <p>{`This is `}<strong parentName=\"p\">{`markdown`}</strong>{` with `}<span style={{\n        color: \"red\"\n      }}>{`JSX`}</span>{`: MDX!`}</p>\n    <div>\n  <Box color=\"tomato\" msg=\"左\" mdxType=\"Box\" />\n  <Box color=\"orange\" msg=\"右\" mdxType=\"Box\" />\n    </div>\n    <hr />\n    <h1>{`React-Redux`}</h1>\n    <p>{`In summary, to connect Redux to React, you must do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Install and import react-redux`}</li>\n      <li parentName=\"ol\">{`Wrap your root App component inside of react-redux's Provider component`}</li>\n      <li parentName=\"ol\">{`Import connect into the component you'd like to pull Redux state into`}</li>\n      <li parentName=\"ol\">{`Create a mapStateToProps function that determines what state you'd like to pull from your store`}</li>\n      <li parentName=\"ol\">{`Export your component using connect, taking mapStateToProps as an argument`}</li>\n      <li parentName=\"ol\">{`Pass through your state as an argument to your render function`}</li>\n      <li parentName=\"ol\">{`Render your state`}</li>\n    </ol>\n    <p>{`Redux is simply a library that ensures we follow a certain pattern to update our global state.`}</p>\n    <h1>{`References`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://chriscourses.com/blog/redux\"\n        }}>{`https://chriscourses.com/blog/redux`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hstevanoski/react-redux-notes-app/tree/hooks/src\"\n        }}>{`https://github.com/hstevanoski/react-redux-notes-app/tree/hooks/src`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/devAbhimanyu/Redux-toolkit/tree/createSlice\"\n        }}>{`https://github.com/devAbhimanyu/Redux-toolkit/tree/createSlice`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.softkraft.co/how-to-setup-redux-with-redux-toolkit/\"\n        }}>{`https://www.softkraft.co/how-to-setup-redux-with-redux-toolkit/`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://redux-toolkit.js.org/api/createSlice\"\n        }}>{`https://redux-toolkit.js.org/api/createSlice`}</a></li>\n    </ul>\n    <h1>{`Todo`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`todo`}</li>\n      <li parentName=\"ul\">{`async hook`}</li>\n      <li parentName=\"ul\">{`backend`}</li>\n      <li parentName=\"ul\">{`fix mdx`}</li>\n    </ul>\n    <h1>{`hooks`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`useSelctor`}</li>\n      <li parentName=\"ul\">{`useDispatcher`}</li>\n      <li parentName=\"ul\">{`useStore`}</li>\n      <li parentName=\"ul\">{`useEffect`}</li>\n      <li parentName=\"ul\">{`useState`}</li>\n    </ul>\n    <h1>{`redux`}</h1>\n    <ol>\n      <li parentName=\"ol\">{`Actions & Action Creators ( action + payload )`}</li>\n      <li parentName=\"ol\">{`Reducers (switch on actions)`}</li>\n      <li parentName=\"ol\">{`Store (createStore)`}</li>\n    </ol>\n    <h1>{`createSlice`}</h1>\n    <p>{`the files structure: we can put all of our Redux-related logic for the slice into a single file.\nconsists of :`}</p>\n    <ul>\n      <li parentName=\"ul\">{`name: a parameter that will be the prefix for all of your action types`}</li>\n      <li parentName=\"ul\">{`initialState: the initial values for our reducer`}</li>\n      <li parentName=\"ul\">{`reducers: it's an object where the keys will become action type strings, and the functions are reducers that will be run when that action type is dispatched.`}</li>\n    </ul>\n    <h1>{`ducks`}</h1>\n    <p>{`Redux.org recommend that most applications should structure files using a \"feature folder\" approach (all files for a feature in the same folder) or the \"ducks\" pattern (all Redux logic for a feature in a single file), rather than splitting logic across separate folders by \"type\" of code (reducers, actions, etc).`}</p>\n    <h1>{`action creators`}</h1>\n    <p>{`console.log(createPost({ id: 123, title: 'Hello World' }))\n// {type : \"posts/createPost\", payload : {id : 123, title : \"Hello World\"}}`}</p>\n    <h1>{`dispatch (Higher Order Function/Component)`}</h1>\n    <p>{`If you don't specify the second argument to connect(), your component will receive dispatch by default. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` connect()(MyComponent)\n // which is equivalent with\n connect(null, null)(MyComponent)\n\n // or\n connect(mapStateToProps /** no second argument */)(MyComponent)\n`}</code></pre>\n    <p>{`if you provide mapDispatchToProps in the 2nd paramter, Therefore, instead of calling props.dispatch(() => increment()), you may call props.increment() directly. `}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import './App.css';\nimport NotesApp from './components/NotesApp';\nimport TodoApp from './components/Todos/TodoApp';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Link\n} from \"react-router-dom\";\n\n/* eslint-disable import/no-webpack-loader-syntax */\nimport HowTo from '!babel-loader!@mdx-js/loader!./HowTo.mdx'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\">\n            <NotesApp />\n          </Route>\n          <Route path=\"/todo\">\n            <TodoApp />\n          </Route>\n          <Route path=\"/about\">\n            <HowTo />\n          </Route>\n        </Switch>\n      </div>\n    </Router >\n  );\n}\n\nconst NavBar = () => {\n  return (\n    <ul className=\"navBar\">\n      <li>\n        <Link className=\"left\" to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link className=\"left\" to=\"/todo\">Todo</Link>\n      </li>\n      <li>\n        <NavLink className=\"right\" to=\"/about\">About</NavLink>\n      </li>\n    </ul>)\n}\n\n// useSelector hook instead.\n//const mapStateToProps = state => {\n//  return { notes: state.notes }\n//}\n\n// useDispatch hook instead.\n//const mapDispatchToProps = dispatch => {\n//  return {\n//    dispatch\n//  }\n//}\n\n// connect is HOC higher order components\n// just like decorator?\n// https://reactjs.org/docs/higher-order-components.html\n//export default connect(mapStateToProps, mapDispatchToProps)(App)\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from 'redux'\nimport notesSlice from \"../features/notes/notesSlice\"\nimport todosSlice from \"../features/todos/todosSlice\"\n\nconst reducer = combineReducers({\n    notes: notesSlice,\n    todos: todosSlice,\n})\n\nconst store = configureStore({\n    reducer,\n})\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\n\n// traditional\n//import store from './redux/store/store'\n// redux-toolkit\nimport store from './redux/store/index'\n\n\n\n// cmd + option + j\n// store.getState() \n// store.dispatch({ type: 'ADD_POST', payload: { id: 1, title: 'How to Use Redux' } })\nwindow.store = store;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}