{"version":3,"sources":["redux/features/notes/notesSlice.js","components/Note.js","components/NoteCounter.js","components/EditNote.js","components/NoteList.js","components/AddNote.js","components/NotesApp.js","App.js","reportWebVitals.js","redux/store/index.js","index.js"],"names":["uuidv4","require","notesSlice","createSlice","name","initialState","notes","reducers","addNote","state","action","payload","loadNotes","map","p","id","title","content","body","editong","deleteNote","filter","editNote","note","editing","updateNote","actions","connect","dispatch","className","onClick","NoteCounter","useSelector","store","shallowEqual","console","log","length","EditNote","useState","setTitle","setContent","useDispatch","onSubmit","e","preventDefault","data","required","type","value","onChange","target","rows","NoteList","notesItems","AddNote","setValue","nanoid","placeholder","NotesApp","useEffect","fetch","then","response","json","slice","About","Todo","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","configureStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e25aa80.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst uuidv4 = require(\"uuid/v4\")\n/**\n * https://www.softkraft.co/how-to-setup-redux-with-redux-toolkit/\n * https://redux-toolkit.js.org/api/createSlice\n */\nconst notesSlice = createSlice({\n    // A name, used in action types\n    name: \"notes\",\n    // better with initialState: []\n    initialState: {\n        notes: []\n    },\n    reducers: {\n        // Redux toolkit uses Immer, you do not have to worry about mutating the state, but... just keep the logic\n        //\n        // Error: An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft\n        // The issue is the use of an arrow function with no curly braces as the reducer, because that acts as an implicit return statement. \n        //So, you're both mutating state.token, and returning the result of the assignment.\n        addNote: (state, action) => { state.notes = [action.payload, ...state.notes] },\n        loadNotes: (state, action) => { state.notes = [...state.notes, ...action.payload.map(p => ({ id: uuidv4(), title: p.title, content: p.body, editong: false }))] },\n        deleteNote: (state, action) => { state.notes = [...state.notes.filter(p => p.id !== action.payload)] },\n        editNote: (state, action) => { state.notes = state.notes.map(note => note.id === action.payload ? { ...note, editing: true } : note) },\n        updateNote: (state, action) => { state.notes = [{ ...action.payload, editing: false }, ...state.notes.filter(note => note.id !== action.payload.id),] },\n    }\n});\n\n// Will handle the action type `'notes/add'`, etc.\nexport const { addNote, loadNotes, deleteNote, editNote, updateNote } = notesSlice.actions;\n\nexport default notesSlice.reducer;","import React from 'react';\nimport { connect } from 'react-redux'\n//import { editNote, deleteNote } from '../redux/actions/actions'\nimport { editNote, deleteNote } from '../redux/features/notes/notesSlice';\n\nconst Note = ({ note, dispatch }) => {\n    return (\n        <div className=\"note\">\n            <h2 className=\"note_title\">{note.title}</h2>\n            <p className=\"note_message\">{note.content}</p>\n            <h2 className=\"note_message\">{note.id}</h2>\n            <div className=\"control-buttons\">\n                <button className=\"btn btn-primary px-4 m-1\"\n                    onClick={() => dispatch(editNote(note.id))}>\n                    Edit</button>\n                <button className=\"btn btn-danger m-1\"\n                    onClick={() => dispatch(deleteNote(note.id))}>\n                    Delete</button>\n            </div>\n        </div>\n    )\n}\n// useDispatch hook will be simpler than Higher Order Component\nexport default connect()(Note);","import { useSelector, shallowEqual } from \"react-redux\";\n\nconst NoteCounter = () => {\n    const { notes } = useSelector(store => store.notes, shallowEqual);\n    return (\n        <div>{console.log('notes', notes)}\n            <p className=\"text-center\">Number of Notes: {notes.length}</p>\n        </div>\n    );\n}\n// const mapStateToProps = (state) => {\n//     return { state }\n// };\n\n// export default connect(mapStateToProps)(NoteCounter);\nexport default NoteCounter;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n//import { updateNote } from '../redux/actions/actions';\nimport { updateNote } from '../redux/features/notes/notesSlice';\n\nconst EditNote = ({ note }) => {\n    const [title, setTitle] = useState(note.title);\n    const [content, setContent] = useState(note.content);\n\n    const dispatch = useDispatch();\n    function handleUpdate(e) {\n        e.preventDefault();\n        const data = {\n            title,\n            content\n        };\n        console.log(`dispatch update with ${note.id}`, data);\n        //dispatch(updateNote(note.id, data));\n        dispatch(updateNote({ ...data, id: note.id }));\n    };\n\n    return (\n        <div className=\"note\">\n            <form className=\"form-group\" onSubmit={handleUpdate}>\n                <input className='form-control p-2 mb-2'\n                    required type=\"text\" value={title} onChange={e => setTitle(e.target.value)}\n                />\n                <textarea className='form-control p-2 mb-2'\n                    required rows=\"5\" value={content} onChange={e => setContent(e.target.value)} />\n                <button type=\"submit\" className='btn btn-primary'>Update</button>\n            </form>\n        </div>\n    );\n}\n\nexport default EditNote;","import React from \"react\"\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport Note from \"./Note\";\nimport NoteCounter from './NoteCounter'\nimport EditNote from './EditNote'\n\n/**\n * The useSelector hook uses === (a.k.a. strict reference equality check) to check whether the previously fetched value from the store \n * is the same that we are currently getting. If that’s not the case, the component re-renders.\n * For simple selectors that only return a portion of the Redux store and nothing more, you can omit the second parameter in this hook. \n * However, when a new object is returned each time the hook runs (e.g., you are making some calculations in the selector function or are \n * building a new object from multiple values of the store), then you should make use of the Redux’s shallowEqual function. If that’s not sufficient, \n * give Reselect a try or try wrapping your component in useMemo instead.\n */\nconst NoteList = () => {\n    const { notes } = useSelector(store => store.notes, shallowEqual);\n    const notesItems = notes.map((note) => (\n        <div key={note.id}>\n            {note.editing ?\n                <EditNote note={note} /> : <Note note={note} />}\n        </div>\n    ));\n\n    return (\n        <div className=\"note-container\">\n            <h3 className=\"text-center\">All Notes</h3>\n            { notes && notes.length > 0 && <NoteCounter />}\n            <div className=\"note-container\">\n                {notes && notesItems}\n            </div>\n        </div>)\n}\n\nexport default NoteList","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n//import { addNote } from '../redux/actions/actions'\nimport { addNote } from '../redux/features/notes/notesSlice'\nimport { nanoid } from 'nanoid'\n\nconst AddNote = () => {\n    const [value, setValue] = useState('');\n    const [content, setContent] = useState('');\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //dispatch(addNote(value, content));\n        dispatch(addNote({ title: value, content: content, id: nanoid(), editing: false }));\n\n        setContent('');\n        setValue('');\n    }\n\n    return (\n        <div className=\"note-container\" >\n            <h2 className=\"text-center\">Write a new note</h2>\n\n            <form className=\"form-group\" onSubmit={handleSubmit}>\n                <input className=\"form-control\" required\n                    type=\"text\" name='title'\n                    placeholder=\"enter title\"\n                    value={value} onChange={e => setValue(e.target.value)} />\n                <textarea className=\"form-control\"\n                    name='content' required rows={5}\n                    placeholder=\"enter content\"\n                    value={content} onChange={e => setContent(e.target.value)} />\n                <button className=\"btn btn-primary btn-lg\" type=\"submit\">Submit</button>\n            </form>\n        </div >\n    );\n}\n\nexport default AddNote;","import React, { useEffect } from 'react'\nimport NoteList from './NoteList';\nimport NewNote from './AddNote';\nimport { useDispatch } from 'react-redux'\n//import { LOAD_NOTES } from '../redux/actions/actions'\nimport { loadNotes } from '../redux/features/notes/notesSlice'\n\nconst NotesApp = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(response => response.json())\n            .then(json => {\n                console.log(\"p\", json)\n                // dispatch({\n                //     type: LOAD_NOTES,\n                //     payload: json.slice(0, 5)\n                // })\n                dispatch(loadNotes(json.slice(0, 5)));\n            })\n    }, [dispatch])\n\n    return (\n        <div className=\"container fluid \" >\n            <div className=\"row\">\n                <div className=\"col\">\n                    <NewNote dispatch={dispatch} />\n                </div>\n                <div className=\"col\">\n                    <NoteList />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NotesApp;","import './App.css';\nimport NotesApp from './components/NotesApp';\nimport { connect } from 'react-redux'\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n/** \n * https://chriscourses.com/blog/redux\n * Redux is simply a library that ensures we follow a certain pattern to update our global state. \n * https://github.com/hstevanoski/react-redux-notes-app/tree/hooks/src\n **/\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/todo\">Todo</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route exact path=\"/\">\n            <NotesApp />\n          </Route>\n          <Route path=\"/todo\">\n            <Todo />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </div>\n    </Router >\n  );\n}\n\nconst About = () => {\n  return <div>About</div>\n}\nconst Todo = () => {\n  return <div>Todo</div>\n}\n// useSelector hook instead\nconst mapStateToProps = state => {\n  return { notes: state.notes }\n}\n\n// useDispatch hook instead.\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch\n  }\n}\n\n// connect is HOC higher order components\n// just like decorator?\n// https://reactjs.org/docs/higher-order-components.html\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { combineReducers } from 'redux'\nimport notesSlice from \"../features/notes/notesSlice\"\n\nconst reducer = combineReducers({\n    notes: notesSlice,\n})\n\nconst store = configureStore({\n    reducer,\n})\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\n\n// traditional\n//import store from './redux/store/store'\n// redux-toolkit\nimport store from './redux/store/index'\n\n\n\n// cmd + option + j\n// store.getState() \n// store.dispatch({ type: 'ADD_POST', payload: { id: 1, title: 'How to Use Redux' } })\nwindow.store = store;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}