{"version":3,"sources":["redux/actions/actions.js","components/Note.js","components/NoteCounter.js","components/EditNote.js","components/NoteList.js","components/NotesForm.js","components/NotesApp.js","App.js","reportWebVitals.js","redux/reducers/reducers.js","redux/store/store.js","index.js"],"names":["ADD_NOTE","DELETE_NOTE","LOAD_NOTES","EDIT_NOTE","UPDATE_NOTE","uuidv4","require","connect","note","dispatch","className","title","content","onClick","id","type","payload","NoteCounter","notes","useSelector","store","shallowEqual","console","log","length","EditNote","useState","setTitle","setContent","useDispatch","onSubmit","e","preventDefault","data","updateNote","required","value","onChange","target","rows","NoteList","notesItems","map","editing","NotesForm","setValue","addNote","name","placeholder","NotesApp","useEffect","fetch","then","response","json","slice","state","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","action","p","body","editong","filter","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bbdf46e.chunk.js","sourcesContent":["export const ADD_NOTE = 'ADD_NOTE';\nexport const DELETE_NOTE = 'DELETE_NOTE';\nexport const LOAD_NOTES = 'LOAD_NOTES';\nexport const EDIT_NOTE = 'EDIT_NOTE';\nexport const UPDATE_NOTE = 'UPDATE_NOTE';\n\nconst uuidv4 = require(\"uuid/v4\")\n\nexport function addNote(title, content) {\n    return { type: ADD_NOTE, payload: { title: title, content: content, id: uuidv4() }, editing: false };\n}\n\nexport function deleteNote(id) {\n    return { type: DELETE_NOTE, payload: id };\n}\n\nexport function loadNotes(contents) {\n    return { type: LOAD_NOTES, payload: contents }\n}\n\nexport function editNote(id) {\n    return { type: EDIT_NOTE, payload: id };\n}\n\nexport function updateNote(id, data) {\n    return { type: UPDATE_NOTE, payload: { ...data, id: id } };\n}","import React from 'react';\nimport { connect } from 'react-redux'\nimport { editNote, deleteNote } from '../redux/actions/actions'\n\nconst Note = ({ note, dispatch }) => {\n    return (\n        <div className=\"note\">\n            <h2 className=\"note_title\">{note.title}</h2>\n            <p className=\"note_message\">{note.content}</p>\n            <div className=\"control-buttons\">\n                <button className=\"btn btn-primary px-4 m-1\"\n                    onClick={() => dispatch(editNote(note.id))}>\n                    Edit</button>\n                <button className=\"btn btn-danger m-1\"\n                    onClick={() => dispatch(deleteNote(note.id))}>\n                    Delete</button>\n            </div>\n        </div>\n    )\n}\n// useDispatch hook will be simpler than Higher Order Component\nexport default connect()(Note);","import { useSelector, shallowEqual } from \"react-redux\";\n\nconst NoteCounter = () => {\n    const notes = useSelector(store => store.notes, shallowEqual);\n    return (\n        <div>{console.log('notes', notes)}\n            <p className=\"text-center\">Number of Notes: {notes.length}</p>\n        </div>\n    );\n}\n// const mapStateToProps = (state) => {\n//     return { state }\n// };\n\n// export default connect(mapStateToProps)(NoteCounter);\nexport default NoteCounter;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateNote } from '../redux/actions/actions';\n\nconst EditNote = ({ note }) => {\n    const [title, setTitle] = useState(note.title);\n    const [content, setContent] = useState(note.content);\n\n    const dispatch = useDispatch();\n    function handleUpdate(e) {\n        e.preventDefault();\n        const data = {\n            title,\n            content\n        };\n        console.log(`dispatch update with ${note.id}`, data);\n        dispatch(updateNote(note.id, data));\n    };\n\n    return (\n        <div className=\"note\">\n            <form className=\"form-group\" onSubmit={handleUpdate}>\n                <input className='form-control p-2 mb-2'\n                    required type=\"text\" value={title} onChange={e => setTitle(e.target.value)}\n                />\n                <textarea className='form-control p-2 mb-2'\n                    required rows=\"5\" value={content} onChange={e => setContent(e.target.value)} />\n                <button type=\"submit\" className='btn btn-primary'>Update</button>\n            </form>\n        </div>\n    );\n}\n\nexport default EditNote;","import React from \"react\"\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport Note from \"./Note\";\nimport NoteCounter from './NoteCounter'\nimport EditNote from './EditNote'\n\n/**\n * The useSelector hook uses === (a.k.a. strict reference equality check) to check whether the previously fetched value from the store \n * is the same that we are currently getting. If that’s not the case, the component re-renders.\n * For simple selectors that only return a portion of the Redux store and nothing more, you can omit the second parameter in this hook. \n * However, when a new object is returned each time the hook runs (e.g., you are making some calculations in the selector function or are \n * building a new object from multiple values of the store), then you should make use of the Redux’s shallowEqual function. If that’s not sufficient, \n * give Reselect a try or try wrapping your component in useMemo instead.\n */\nconst NoteList = () => {\n    const notes = useSelector(store => store.notes, shallowEqual);\n    const notesItems = notes.map((note) => (\n        <div key={note.id}>\n            {note.editing ?\n                <EditNote note={note} /> : <Note note={note} />}\n        </div>\n    ));\n\n    return (\n        <div className=\"note-container\">\n            <h3 className=\"text-center\">All Notes</h3>\n            { notes && notes.length > 0 && <NoteCounter />}\n            <div className=\"note-container\">\n                {notes && notesItems}\n            </div>\n        </div>)\n}\n\nexport default NoteList","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addNote } from '../redux/actions/actions'\n\nconst NotesForm = () => {\n    const [value, setValue] = useState('');\n    const [content, setContent] = useState('');\n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch(addNote(value, content));\n        setContent('');\n        setValue('');\n    }\n\n    return (\n        <div className=\"note-container\" >\n            <h2 className=\"text-center\">Write a new note</h2>\n\n            <form className=\"form-group\" onSubmit={handleSubmit}>\n                <input className=\"form-control\" required\n                    type=\"text\" name='title'\n                    placeholder=\"enter title\"\n                    value={value} onChange={e => setValue(e.target.value)} />\n                <textarea className=\"form-control\"\n                    name='content' required rows={5}\n                    placeholder=\"enter content\"\n                    value={content} onChange={e => setContent(e.target.value)} />\n                <button className=\"btn btn-primary btn-lg\" type=\"submit\">Submit</button>\n            </form>\n        </div >\n    );\n}\n\nexport default NotesForm","import React, { useEffect } from 'react'\nimport NoteList from './NoteList';\nimport NewNote from './NotesForm';\nimport { useDispatch } from 'react-redux'\n\nconst NotesApp = () => {\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(response => response.json())\n            .then(json => {\n                console.log(\"p\", json)\n                dispatch({\n                    type: 'LOAD_NOTES',\n                    payload: json.slice(0, 15)\n                })\n            })\n    }, [dispatch])\n\n    return (\n        < div className=\"container fluid\" >\n            <div className=\"row\">\n                <div className=\"col\">\n                    <NewNote dispatch={dispatch} />\n                </div>\n                <div className=\"col\">\n                    <NoteList />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default NotesApp;","import './App.css';\nimport NotesApp from './components/NotesApp';\nimport { connect } from 'react-redux'\n\n/** \n * https://chriscourses.com/blog/redux\n * Redux is simply a library that ensures we follow a certain pattern to update our global state. \n * https://github.com/hstevanoski/react-redux-notes-app/tree/hooks/src\n **/\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotesApp />\n    </div>\n  );\n}\n\n// useSelector hook instead\nconst mapStateToProps = state => {\n  return { notes: state.notes }\n}\n\n// useDispatch hook instead.\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch\n  }\n}\n\n// connect is HOC higher order components\n// just like decorator?\n// https://reactjs.org/docs/higher-order-components.html\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_NOTE, DELETE_NOTE, LOAD_NOTES, EDIT_NOTE, UPDATE_NOTE } from '../actions/actions';\n\nconst initialState = {\n    notes: [], // just array is better, no need for 'notes' if there are no extra fields.\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_NOTE:\n            return { notes: [action.payload, ...state.notes] }\n            //return Object.assign({}, state, { posts: state.posts.concat(action.payload) })\n\n        case LOAD_NOTES:\n            return {\n                //...state, posts: [...state.posts, ...action.payload]\n                notes: [...state.notes, ...action.payload.map(p => ({ id: p.id, title: p.title, content: p.body, editong: false }))]\n                //posts: state.posts.concat(action.payload)\n            };\n        case DELETE_NOTE:\n            return { notes: [...state.notes.filter(p => p.id !== action.payload)] };\n        case EDIT_NOTE:\n            return { notes: state.notes.map(note => note.id === action.payload ? { ...note, editing: true } : note) };\n        case UPDATE_NOTE:\n            console.log('updating', action.payload)\n            return {\n                notes: [{ ...action.payload, editing: false }, ...state.notes.filter(note => note.id !== action.payload.id),]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/reducers\";\n\nexport default createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store/store'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// cmd + option + j\n// store.getState() \n// store.dispatch({ type: 'ADD_POST', payload: { id: 1, title: 'How to Use Redux' } })\nwindow.store = store;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}